"""
Interface de linha de comando para o conversor XML to JSON
"""

import argparse
import sys
from pathlib import Path
from typing import Optional

from ..core.converter import XMLToJSONConverter
from ..models.nfe_extractor import NFEExtractor
from ..utils.formatters import XMLFormatter


def create_parser() -> argparse.ArgumentParser:
    """
    Cria parser de argumentos da linha de comando
    
    Returns:
        ArgumentParser configurado
    """
    parser = argparse.ArgumentParser(
        description='Converte arquivos XML para JSON',
        epilog='Exemplos de uso:\n'
               '  python main.py arquivo.xml\n'
               '  python main.py arquivo.xml -o saida.json\n'
               '  python main.py -d diretorio/ -r\n'
               '  python main.py arquivo.xml --nfe-info',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    # Argumentos principais
    parser.add_argument(
        'input',
        nargs='?',
        help='Arquivo XML ou diret√≥rio de entrada'
    )
    
    parser.add_argument(
        '-o', '--output',
        help='Arquivo JSON de sa√≠da (padr√£o: mesmo nome do XML com extens√£o .json)'
    )
    
    parser.add_argument(
        '-d', '--directory',
        help='Diret√≥rio com arquivos XML para convers√£o em lote'
    )
    
    parser.add_argument(
        '-r', '--recursive',
        action='store_true',
        help='Busca recursiva em subdiret√≥rios'
    )
    
    parser.add_argument(
        '--pattern',
        default='*.xml',
        help='Padr√£o de arquivos para busca (padr√£o: *.xml)'
    )
    
    # Configura√ß√µes de convers√£o
    parser.add_argument(
        '--no-clean-namespaces',
        action='store_true',
        help='N√£o remove namespaces das tags'
    )
    
    parser.add_argument(
        '--no-attributes',
        action='store_true',
        help='N√£o preserva atributos XML'
    )
    
    parser.add_argument(
        '--no-type-conversion',
        action='store_true',
        help='N√£o converte tipos automaticamente'
    )
    
    parser.add_argument(
        '--indent',
        type=int,
        default=2,
        help='Indenta√ß√£o do JSON (padr√£o: 2)'
    )
    
    parser.add_argument(
        '--minimize',
        action='store_true',
        help='Gera JSON minimizado (sem indenta√ß√£o)'
    )
    
    # Funcionalidades espec√≠ficas
    parser.add_argument(
        '--nfe-info',
        action='store_true',
        help='Extrai informa√ß√µes espec√≠ficas de NFe'
    )
    
    parser.add_argument(
        '--validate-only',
        action='store_true',
        help='Apenas valida XML sem converter'
    )
    
    parser.add_argument(
        '--stats',
        action='store_true',
        help='Mostra estat√≠sticas de convers√£o'
    )
    
    parser.add_argument(
        '--backup',
        action='store_true',
        help='Cria backup dos arquivos originais'
    )
    
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Sa√≠da detalhada'
    )
    
    parser.add_argument(
        '--version',
        action='version',
        version='XML to JSON Converter 1.0.0'
    )
    
    return parser


def print_header():
    """Imprime cabe√ßalho do programa"""
    print("=" * 60)
    print("üîÑ XML to JSON Converter")
    print("=" * 60)


def print_file_info(file_path: Path, formatter: XMLFormatter):
    """
    Imprime informa√ß√µes do arquivo
    
    Args:
        file_path: Caminho do arquivo
        formatter: Inst√¢ncia do formatador
    """
    try:
        stat = file_path.stat()
        size_formatted = formatter.get_size_formatted(stat.st_size)
        
        print(f"üìÅ Arquivo: {file_path.name}")
        print(f"üìè Tamanho: {size_formatted}")
        print(f"üìÖ Modificado: {stat.st_mtime}")
        
    except Exception as e:
        print(f"‚ùå Erro ao obter informa√ß√µes do arquivo: {e}")


def handle_single_file(args, converter: XMLToJSONConverter):
    """
    Processa um √∫nico arquivo
    
    Args:
        args: Argumentos da linha de comando
        converter: Inst√¢ncia do conversor
    """
    input_path = Path(args.input)
    
    if not input_path.exists():
        print(f"‚ùå Arquivo n√£o encontrado: {input_path}")
        return False
        
    if args.verbose:
        print_file_info(input_path, XMLFormatter())
        
    # Define arquivo de sa√≠da
    if args.output:
        output_path = Path(args.output)
    else:
        output_path = input_path.with_suffix('.json')
        
    # Configura√ß√µes de convers√£o
    conversion_settings = {
        'clean_namespaces': not args.no_clean_namespaces,
        'preserve_attributes': not args.no_attributes,
        'auto_type_conversion': not args.no_type_conversion,
        'indent_json': 0 if args.minimize else args.indent
    }
    
    # Apenas valida√ß√£o
    if args.validate_only:
        print("üîç Validando XML...")
        is_valid = converter.validator.is_valid_xml_file(input_path)
        if is_valid:
            print("‚úÖ XML v√°lido!")
        else:
            print("‚ùå XML inv√°lido!")
            errors = converter.validator.get_last_errors(3)
            for error in errors:
                print(f"   ‚Ä¢ {error}")
        return is_valid
        
    # Convers√£o
    print(f"üîÑ Convertendo: {input_path.name}")
    
    if args.backup:
        converter.file_handler.backup_file(input_path)
        
    result = converter.convert_file(input_path, output_path, **conversion_settings)
    
    if result:
        print(f"‚úÖ Convers√£o conclu√≠da: {output_path}")
        
        # Informa√ß√µes espec√≠ficas de NFe
        if args.nfe_info:
            nfe_extractor = NFEExtractor()
            nfe_data = nfe_extractor.extract_nfe_info(result)
            if nfe_data:
                print("\nüìã Informa√ß√µes da NFe:")
                for key, value in nfe_data.items():
                    print(f"   ‚Ä¢ {key}: {value}")
                    
        # Estat√≠sticas
        if args.stats:
            stats = converter.get_converter_stats()
            print(f"\nüìä Estat√≠sticas:")
            print(f"   ‚Ä¢ Valida√ß√µes: {stats.get('validator', {}).get('validations_performed', 0)}")
            print(f"   ‚Ä¢ Elementos processados: {stats.get('parser', {}).get('parsed_elements', 0)}")
            
        return True
    else:
        print(f"‚ùå Erro na convers√£o de {input_path.name}")
        return False


def handle_directory(args, converter: XMLToJSONConverter):
    """
    Processa diret√≥rio com m√∫ltiplos arquivos
    
    Args:
        args: Argumentos da linha de comando
        converter: Inst√¢ncia do conversor
    """
    input_dir = Path(args.directory)
    
    if not input_dir.exists() or not input_dir.is_dir():
        print(f"‚ùå Diret√≥rio n√£o encontrado: {input_dir}")
        return False
        
    print(f"üìÅ Processando diret√≥rio: {input_dir}")
    
    # Configura√ß√µes de convers√£o
    conversion_settings = {
        'clean_namespaces': not args.no_clean_namespaces,
        'preserve_attributes': not args.no_attributes,
        'auto_type_conversion': not args.no_type_conversion,
        'indent_json': 0 if args.minimize else args.indent
    }
    
    # Convers√£o em lote
    results = converter.convert_batch(
        input_dir,
        pattern=args.pattern,
        **conversion_settings
    )
    
    # Relat√≥rio
    success_count = sum(results.values())
    total_count = len(results)
    
    print(f"\nüìä Relat√≥rio da convers√£o:")
    print(f"   ‚Ä¢ Total de arquivos: {total_count}")
    print(f"   ‚Ä¢ Convers√µes bem-sucedidas: {success_count}")
    print(f"   ‚Ä¢ Falhas: {total_count - success_count}")
    
    if args.verbose and results:
        print(f"\nüìÑ Detalhes:")
        for file_path, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            print(f"   {status} {Path(file_path).name}")
            
    # Estat√≠sticas gerais
    if args.stats:
        stats = converter.get_converter_stats()
        print(f"\nüìà Estat√≠sticas gerais:")
        print(f"   ‚Ä¢ Valida√ß√µes: {stats.get('validator', {}).get('validations_performed', 0)}")
        print(f"   ‚Ä¢ Elementos processados: {stats.get('parser', {}).get('parsed_elements', 0)}")
        print(f"   ‚Ä¢ Erros de valida√ß√£o: {stats.get('validator', {}).get('invalid_files', 0)}")
        
    return success_count > 0


def main():
    """Fun√ß√£o principal da interface CLI"""
    parser = create_parser()
    
    # Se n√£o h√° argumentos, mostra help
    if len(sys.argv) == 1:
        print_header()
        parser.print_help()
        print("\nüí° Dica: Use 'python main.py arquivo.xml' para convers√£o simples")
        return
        
    args = parser.parse_args()
    
    # Verifica se foi fornecido input ou diret√≥rio
    if not args.input and not args.directory:
        print("‚ùå Erro: Especifique um arquivo XML ou use --directory")
        parser.print_help()
        return
        
    print_header()
    
    # Cria inst√¢ncia do conversor
    converter = XMLToJSONConverter()
    
    try:
        # Processamento por diret√≥rio
        if args.directory:
            success = handle_directory(args, converter)
        # Processamento de arquivo √∫nico
        else:
            success = handle_single_file(args, converter)
            
        if success:
            print(f"\nüéâ Opera√ß√£o conclu√≠da com sucesso!")
        else:
            print(f"\n‚ùå Opera√ß√£o falhou!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print(f"\n\nüëã Opera√ß√£o cancelada pelo usu√°rio")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()